import unittest     # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å unittest –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
from unittest.mock import patch     # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º patch ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –≤–≤–æ–¥–∞) –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
from math import sqrt, pi      # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ math –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É pi –∏ —Ñ—É–Ω–∫—Ü–∏—é sqrt (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å), —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–ª–æ—â–∞–¥–∏ —Ñ–∏–≥—É—Ä
from geomet_shape_calculate import Circle, Triangle, Shape     # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Ñ–∏–≥—É—Ä –∏–∑ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è geom_shapes, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –º–µ—Ç–æ–¥—ã
import io # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å io, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏,
            # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º io.StringIO ‚Äî "–ø–æ—Ç–æ–∫" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—ã–≤–æ–¥

# üìå --- –ö–ª–∞—Å—Å —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫—Ä—É–≥–∞ ---
class TestSuite1_Circle(unittest.TestCase):
    # –ö–ª–∞—Å—Å-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫ unittest.TestCase ‚Äî –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Circle

    def test_01_area(self):    # ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞
        c = Circle(5)     # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Circle —Å —Ä–∞–¥–∏—É—Å–æ–º 5
        expected_area = pi * 5 ** 2     #–í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å –≤—Ä—É—á–Ω—É—é (œÄr¬≤)
        self.assertAlmostEqual(c.area(), expected_area)     #–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ area() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –±–ª–∏–∑–∫–æ–µ –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É (—Å —É—á—ë—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏)

    def test_02_invalid_radius(self):      # ‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with self.assertRaises(ValueError):     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–∞ —Å —Ä–∞–¥–∏—É—Å–æ–º 0 –≤—ã–∑—ã–≤–∞–µ—Ç ValueError
            Circle(0)

        with self.assertRaises(ValueError):     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º –≤—ã–∑—ã–≤–∞–µ—Ç ValueError
            Circle(-1)

# üìå --- –ö–ª–∞—Å—Å —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ ---
class TestSuite2_Triangle(unittest.TestCase):      # –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ Triangle

    def test_01_valid_triangle_area(self):      # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞

        t = Triangle(3, 4, 5)      # –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ 3, 4, 5
        s = (3 + 4 + 5) / 2     # –ü–æ–ª—É–ø–µ—Ä–∏–º–µ—Ç—Ä (—Ñ–æ—Ä–º—É–ª–∞ –ì–µ—Ä–æ–Ω–∞)
        expected_area = sqrt(s * (s - 3) * (s - 4) * (s - 5))     # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–µ—Ä–æ–Ω–∞
        self.assertAlmostEqual(t.area(), expected_area)

    def test_02_invalid_triangle(self):     # ‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–∫—É
        with self.assertRaises(ValueError):
            Triangle(1, 2, 10)      # —Å—Ç–æ—Ä–æ–Ω—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫


# üìå --- –ö–ª–∞—Å—Å —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ print_area –∏–∑ run.py ---
class TestSuite3_PrintArea(unittest.TestCase):

    @patch('sys.stdout', new_callable=io.StringIO)      # üì£ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–º–µ–Ω—è–µ—Ç sys.stdout –Ω–∞ –æ–±—ä–µ–∫—Ç StringIO,
                                                                # —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –≤—Å—ë, —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ—Å—Ç–∞

    def test_01_print_area_circle(self, mock_stdout):       # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø–ª–æ—â–∞–¥–∏ –∫—Ä—É–≥–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π print_area
        c = Circle(5)
        from run import print_area      # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é print_area –∏–∑ –º–æ–¥—É–ª—è run (–≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞)

        print_area(c)     # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ–±—ä–µ–∫—Ç–æ–º –∫—Ä—É–≥–∞

        output = mock_stdout.getvalue().strip()     # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–∑ mock_stdout, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ –∫—Ä–∞—è–º

        expected_area = pi * 5 ** 2     # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å

        self.assertIn("–∫—Ä—É–≥–∞", output)      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤—ã–≤–æ–¥–µ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–∫—Ä—É–≥–∞" (—Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã)

        self.assertIn(f"{expected_area:.2f}", output)     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–æ—â–∞–¥—å –≤—ã–≤–µ–¥–µ–Ω–∞ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

    @patch('sys.stdout', new_callable=io.StringIO)      # üì£ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–º–µ–Ω—è–µ—Ç sys.stdout –Ω–∞ –æ–±—ä–µ–∫—Ç StringIO,
                                                                # —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –≤—Å—ë, —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ—Å—Ç–∞

    def test_02_print_area_triangle(self, mock_stdout):       # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø–ª–æ—â–∞–¥–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–µ–π print_area
        t = Triangle(3, 4, 5)
        from run import print_area      # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é print_area –∏–∑ –º–æ–¥—É–ª—è run (–≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞)

        print_area(t)       # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ–±—ä–µ–∫—Ç–æ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞

        output = mock_stdout.getvalue().strip()     # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–∑ mock_stdout, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ –∫—Ä–∞—è–º

        s = (3 + 4 + 5) / 2     # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å
        expected_area = sqrt(s * (s - 3) * (s - 4) * (s - 5))

        self.assertIn("—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞", output)       # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤—ã–≤–æ–¥–µ –µ—Å—Ç—å —Å–ª–æ–≤–æ "—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞" (—Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã)

        self.assertIn(f"{expected_area:.2f}", output)       # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–æ—â–∞–¥—å –≤—ã–≤–µ–¥–µ–Ω–∞ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

# üìå --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ ---
if __name__ == '__main__':
    unittest.main()     #–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã, –∫–æ–≥–¥–∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

'''
–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:

–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ/–±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω).
–í —Ç–µ—Å—Ç–∞—Ö –ª—É—á—à–µ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ).
'''